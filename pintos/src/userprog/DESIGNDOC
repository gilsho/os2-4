		     +--------------------------+
         	 | CS 140	                |
		     | PROJECT 2: USER PROGRAMS	|
		     | DESIGN DOCUMENT        	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Dan Cocuzzo <dcocuzzo@stanford.edu>
Rory MacQueen <macqueen@stanford.edu>
Gil Shotan <gilsho@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

No comment.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

No comment.


			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define MAX_PADDING 4 - defines the maximum byte-size of zero padding that we
                        may use during argument parsing to align the arg data.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

First we copy the entire string of arguments onto the user stack. Then
we make a pass over the arguments and push the starting addresses of
the arguments in a temporary kernel page. We then pop the arguments' start
addresses from the temporary kernel page and push them on the user 
stack in the correct order specified in the project spec (this includes
arg alignment pad, null delimiters, argv, argc, and the return address).

We have two checks in place to protect against overflowing the stack page.
When we first copy the input string onto the user stack, we use strlcpy
and cap the number of bytes copied at the size of a page. We then
check if this cap has been reached and report an error if it has.
After we finish one inspection pass over the argument string in the user
stack to determine the number of arguments (argc), we calculate whether
there is enough space on the user stack to push the pointers to argv[v],
argc, and the rest of the bytes required. If we don't have enough space,
we return an error.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The standard strtok function stores state internally. There is an implicit
assumption that each successive call to str_tok will be made
by the same thread using the same string. Interleaving calls to
str_tok by multiple threads will corrupt the state stored in
str_tok and exhibit undefined behavior. str_tok_r solves this problem
by providing a save_ptr which is passed by reference. This allows
each thread to maintain its own state, allowing multiple 
threads to execute strtok_r simultaneously.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.


1. Parsing arguments in the shell lets the user interleave 
   directives to the shell with arguments to the program. For example,
   the operators "> < | ; &&" are meant to be interpreted by the shell.
   If we were to pass in the full string entered by the user to the 
   'exec' system call the kernel would need to know about these special
   symbols.

2. Having the kernel perform the argument parsing means that every 
   program must be executed with its parameters specified in a string
   format delegated by spaces. This is reasonable for arguments passed
   in via the command line interface, but creates unnecessary overhead
   for processes whose list of arguments are known ahead of time. If, for
   example, a program wants to spawn a child process with a fixed set 
   of arguments, the parent process can just go ahead and construct the 
   stack itself rather than convert it into a string format first.

3. Similar to the previous point, if a process wants to spawn multiple
   process with the same set of arguments it can prepare a stack frame
   with the arguments loaded once, and pass the same stack to the kernel
   multiple times. The kernel will just need to scan the stack once
   and copy it to a new location in memory, a much more efficient 
   procedure.
	 
4. Parsing command line interfaces via the shell minimizes time in 
   kernel mode. If an error occurs while parsing an argument it will 
   crash the shell as opposed to crashing the kernel. The cost of 
   restarting the shell is a lot cheaper than restarting the kernel.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	
in thread.h
------------   

struct thread {
  ...
  struct process_info *process_info; /* a pointer to a struct containing 
                                        all information related to the 
                                        thread's process. */
  ...
}

in process.h
------------

typedef int pid_t;  /*a process id type on the kernel side. */


in process.c
-------------

struct lock lock_filesys; /* a coarse global lock restricting access 
                            to the file system */


/* This struct contains all the information related to a process */

struct process_info
{
  pid_t pid;		/* unique process id (same as thread tid) */
  struct lock lock;	/* lock for concurrent access to this info struct */
  int exit_code;	/* the status code set by the process during exit, 
                           only valid if is_alive is false */
  bool has_been_waited;    /* indicates if the parent process has waited on 
                           this child process already */
  bool is_alive;	    /* indicates whether this process has exited */
  bool is_parent_alive;    /* indicates whether the parent has exited. used for
                           memory management by the process when exiting. */
  struct condition cond;  /* used to implement the sys_wait system call */
  struct list_elem child_elem;   /* elem in parent process' child list */
  struct list children;          /* list of this process' children */
  struct list fd_list;   /* list of file descriptors and associated files
                             used by this process. */
  struct file *exec_file;    /* a pointer to this process' executable
                                file that its thread is running. used to deny
                                write access to the file while the process is 
                                running  */ 
  int next_fd;              /* fd counter localized to this process only */
};


/* This struct is used to pass more than one variable between a parent process' process_execute call and a child process' start_process function. */

struct process_init_data
{
  char *args;		/* string containing name of executable and args 
                         of/to the program. */
  struct semaphore sema;	/* synchronization mechanism enabling parent 
                               process to wait for the child to finish
                               loading its executable */
  bool load_status;	      /* represents if load of child process was  
                             successful. used to signal to parent process. */
  struct process_info *info;	/* the child process' information struct 
                                 initialized by its parent process */
};


/* This struct is a node element in a linked list of file descriptors 
   mapping to open files. */

struct file_desc
{
  int fd;		      /* the file descriptor associated with the file */
  struct file *file;	      /* a handle to the file struct associated with fd */
  struct list_elem elem;    /* a list elem used to embed this struct within a 
                               process' list of active files */
};


in syscall.c:
-------------

define FILENAME_MAX 14 	/* maxumim number of chars allowed in a file name */


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a process opens a file, it allocates a file_desc struct (defined in 
process.c) and generates a unique file descriptor number using a process-local
counter. The counter mechanism isolates the file struct from the file 
descriptor, providing increased security; the user does not have access to 
kernel-only structs. 

The process then appends the new file_desc struct to the end of its list of 
file_desc structs. In this scheme, file descriptors are only unique within a 
single process, and a process may only access descriptors that it has assigned 
itself. We chose not to implement a global counter for assigning globally 
unique file descriptors because it would require synchronization constructs.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We first pop the arguments off the stack. We try ti find the file descriptor by 
looking it up in a linked list of file descriptors open by the process. 
We then check that the buffer is ALL(start + end) contained in valid
user virtual address space. 
we then acquire a global file system lock to ensure only one process has access 
to the file system at a time.
and finally we call the appropriate function from file.c , file_read or 
file_write. and then push the return value to eax on the interrupt frame.

Reading Data:
When reading user data from a file, a process first pops & validates the 
arguments off of the user stack (the entire span of destination buffer memory 
is validated using the size arg). Next, the process attempts to resolve the 
file struct from the given file descriptor by searching its list of file_desc 
structs, exiting the process with a -1 status code if a file is not found. It 
then performs a read from either STDIN or the specified file struct using the 
appropriate filesys functions, pushing the resulting number of bytes read onto 
the user stack. 

Writing Data:
The steps for writing user data to a file are similar to reading data from a 
file. A process first pops & validates the arguments off of the stack, 
validating the user virtual memory range that the source buffer spans (we do 
this in a smart manner by validating endpoints only). Next, the process 
attempts to resolve the file struct from the given file descriptor by searching 
its list of file_desc structs, exiting the process with a -1 status code if a 
file is not found. It then performs a write to either STDOUT or the specified 
file struct using the appropriate filesys functions, pushing the resulting 
number of bytes written onto the user stack. 


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

If we had to inspect every byte address for validity, then it would require as 
many PTE inspections as bytes to read/write. Hence for a full page that would 
be 4,096 inspections.

However, if we assume that the entire current page is valid user memory, we 
only need to inspect the page table (calling pagedir_get_page) for each page 
that the data spans, not on every successive address. We implemented an 
improved approach by caching the current page boundary to prevent unnecessary 
PTE inspections. 

For both a full page (4,096 bytes) and 2 bytes of data, this improved scheme 
only requires a minimum of one inspection and a maximum of two inspections.

If we had implemented our user memory access check using the second approach 
described in the project spec, we would not have had to call pagedir_get_page 
at all, instead relying on the MMU to generate a page fault when an illegal 
memory access occurs.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The wait system call (sys_wait in syscall.c) invokes process_wait (in 
process.c) where most of the magic happens.

First, we check if the pid of the child to be waited on is actually a child of 
the current process. If it is not, return -1 as an error, since a process can 
not wait on a non-child process.

Next, we verify that this is the first time that the calling (parent) process 
is waiting on this particular child process by checking its process info 
structure. If this is not the first time that this child has been waited on, 
return -1 as an error.

We then check that the child process has not yet exited. If the child process 
has already exited, we extract the status code that it stored in its process 
info structure.

If the child process is still alive and running, the parent process blocks 
(cond_wait) on the condition variable associated with the child's process info 
structure. When the child process finally exits, it signals the waiting parent 
process (cond_signal) and the parent process then extracts the child process' 
exit code.

Finally, before returning the extracted child status code, we designate the 
child process as being waited on so that if the parent process tries to wait on 
it again, a status code of -1 will be returned (see above).  


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We avoid obscuring the primary logic of our functions in a morass of 
error-handling code by delegating error-handling to specific functions that 
perform memory read/write operations. This allows us to produce high-level code 
that is logical and intuitively organized.

While processing system calls, we implemented the function pop_arg which pops 
the pointer to the next arg (4-byte word) from the user stack. This function 
safeguards against invalid user memory accesses by validating the user stack 
pointer at both the current location and the next word location, returning -1 
and exiting the process if an invalid memory pointer is encountered. This 
function modularizes the error handling that otherwise would be duplicated in 
many different areas of the various system call functions.

To validate user memory access, we implemented the function valid_user_addr 
that combines several checks on a given user virtual memory address. A user 
virtual memory address is valid if the memory pointer 1) is not NULL, 2) points 
to a virtual address below PHYS_BASE (user space), and 3) is contained in a 
page installed in the current processes' page directory.

When a process exits, such as when an error is detected, we ensure that all 
temporarily allocated resources are freed within the function process_exit, 
which is invoked before a thread exits (both gracefully or due to an 
exception). A process releases any locks that it may have acquired during 
execution, closes all files in its list of file descriptors, and frees any 
structs belonging to its child processes that have already exited. In addition, 
a process may free its own process info struct if its parent process has 
already exited.

For example, if a process has spawned 10 child processes that all have exited, 
opens a file (thus storing a file descriptor), and encounters a page fault 
after acquiring the file system lock to write data to the file, we can be sure 
that all resources will be freed correctly. The page fault will set the status 
code of the crashed process to -1 and kill the thread, eventually invoking 
process_exit. In process_exit, the file system lock will be released, the open 
file will be closed, and all child structs will be freed because they are no 
longer alive.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Before we load a new process, we pass it a pointer to a struct of 
initialization data. This struct has an initialized semaphore and a boolean 
success variable. The semaphore is initialized to value zero, and after the 
parent process calls load, it tries to down the semaphore, thus blocking. The 
child process updates the boolean on the init struct after it has loaded it's 
process, and then calls sema_up on the semaphore. The parent can now proceed, 
and return from process exec with the new pid of the child, or with an error 
code if the load was a failure.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When a parent process P calls wait(C) on a child, it first checks to see if C 
is 'alive', i.e. has not yet exited. If C is not alive, then P simply retrieves 
the exit code of C and returns. If C is alive, then P blocks on a condition 
variable associated with the child's process info struct. When child C exits, 
it will signal this condition variable to wake up its parent P who is waiting 
on that condition. Parent P can then retrieve the exit value of C and return. 

All deallocation of memory happens in process_exit. When a process exits, it 
first must free the memory of its children who have already exited. It will 
then check to see if it's parent is still alive, and if not, it will free its 
own memory. In this way, we account for all cases: either P exits first, in 
which case it will not free the memory of C (since C is still alive). In this 
case, C is responsible for freeing its own memory when it exits (which it will 
do because it will see that its parent is already dead). The other case is that 
C exits first, in which case it will set itself to be dead, but NOT free its 
own memory (since its parent is still alive). When P finally exits later, it 
will free the memory of the dead C process. 


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We chose to verify the validity of a user-provided pointer before dereferencing 
it. The other option (just checking that pointer is below PHYS_BASE) would 
require us to modify the code in exception.c, which we felt added an 
unnecessary level of complexity to our system. With our approach, we are 
keeping the bounds checking all in one place.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Each process uses a dynamically allocated linked list to store its open files, 
along with their file_descriptors. The advantage here is that a process can 
only have access to its own open files, and there is no danger that it will 
access, and potentially corrupt, the open file state of another process. It 
also makes it easy to add open files, as you simply append the new file to the 
end of a list. Since it is dynamically allocated, we don't need to place a cap 
on the number of open files that a process can have.
Moreover, we generate file descriptors using a process-specific counter, which 
means that a file descriptor is not tied to the pointer to the file. This 
design protects against malicious user programs which might try to dereference 
a file descriptor to get access to restricted parts of the kernel.

A disadvantage is that doing a lookup on an open file using a file descriptor 
takes O(n) time, since one has to traverse the entire linked list of open 
files. Also, since each process is maintaining its own list, there is a fair 
amount of memory overhead to keep track of open files.


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We have not changed the identity mapping. Unlike file descriptors, tid do not 
expose sensitive addresses so it is safe to simply cast the tid to a pid and 
return that to the user. This is appropriate because each process contains only 
a single thread.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

